#!/usr/bin/env node

import fs from 'node:fs';
import process from 'node:process';

// Resolve to library entry (supports ts-node in dev and dist in prod)
let parser;
try {
  // When installed, the compiled JS lives in dist/
  const { parseLinkedInPdf } = await import('../dist/index.js');
  parser = parseLinkedInPdf;
} catch (err) {
  // Fallback to src during development
  const { parseLinkedInPdf } = await import('../src/index.ts');
  parser = parseLinkedInPdf;
}

const args = process.argv.slice(2);

// Parse CLI flags
const validateFlag = args.includes('--validate');
const helpFlag = args.includes('--help') || args.includes('-h');

if (helpFlag) {
  console.log(`
Usage: parse-linkedin-pdf [options] [file]

Parse LinkedIn Profile.pdf exports to JSON Resume format

Options:
  --validate    Validate output against JSON Resume schema
  --help, -h    Show this help message

Examples:
  parse-linkedin-pdf Profile.pdf
  parse-linkedin-pdf --validate Profile.pdf
  cat Profile.pdf | parse-linkedin-pdf --validate
`);
  process.exit(0);
}

// Filter out flags to get file path
const fileArgs = args.filter(arg => !arg.startsWith('--') && arg !== '-h');

async function readInput() {
  if (fileArgs.length > 0 && fileArgs[0] !== '-') {
    const filePath = fileArgs[0];
    return fs.promises.readFile(filePath);
  }
  // stdin
  const chunks = [];
  for await (const chunk of process.stdin) {
    chunks.push(chunk);
  }
  if (chunks.length === 0) {
    console.error('No input PDF provided (path argument or piped to stdin)');
    process.exit(1);
  }
  return Buffer.concat(chunks);
}

try {
  const pdfBuffer = await readInput();
  const result = await parser(pdfBuffer);
  
  // Validate if requested
  if (validateFlag) {
    try {
      const { validateJSONResume } = await import('../src/validate.mjs');
      const validation = validateJSONResume(result);
      
      if (!validation.valid) {
        console.error('❌ Schema validation failed:');
        validation.errors?.forEach(error => {
          console.error(`  - ${error}`);
        });
        process.exit(1);
      } else {
        console.error('✅ Output is valid against JSON Resume schema');
      }
    } catch (validationError) {
      console.error('⚠️  Schema validation unavailable:', validationError.message);
    }
  }
  
  console.log(JSON.stringify(result, null, 2));
} catch (e) {
  console.error(e instanceof Error ? e.message : e);
  process.exit(1);
}
